// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/05/2024 16:59:03"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          InstructionMemory
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module InstructionMemory_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] Addr;
reg Clk;
// wires                                               
wire [31:0] InstrOut;

// assign statements (if any)                          
InstructionMemory i1 (
// port map - connection between master ports and signals/registers   
	.Addr(Addr),
	.Clk(Clk),
	.InstrOut(InstrOut)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
always
begin
	Clk = 1'b0;
	Clk = #50000 1'b1;
	#50000;
end 
// Addr[ 31 ]
initial
begin
	Addr[31] = 1'b0;
end 
// Addr[ 30 ]
initial
begin
	Addr[30] = 1'b1;
end 
// Addr[ 29 ]
initial
begin
	Addr[29] = 1'b0;
end 
// Addr[ 28 ]
initial
begin
	Addr[28] = 1'b0;
end 
// Addr[ 27 ]
initial
begin
	Addr[27] = 1'b1;
end 
// Addr[ 26 ]
initial
begin
	Addr[26] = 1'b1;
end 
// Addr[ 25 ]
initial
begin
	Addr[25] = 1'b0;
end 
// Addr[ 24 ]
initial
begin
	Addr[24] = 1'b0;
end 
// Addr[ 23 ]
initial
begin
	Addr[23] = 1'b0;
end 
// Addr[ 22 ]
initial
begin
	Addr[22] = 1'b0;
end 
// Addr[ 21 ]
initial
begin
	Addr[21] = 1'b0;
end 
// Addr[ 20 ]
initial
begin
	Addr[20] = 1'b0;
end 
// Addr[ 19 ]
initial
begin
	Addr[19] = 1'b0;
end 
// Addr[ 18 ]
initial
begin
	Addr[18] = 1'b0;
end 
// Addr[ 17 ]
initial
begin
	Addr[17] = 1'b0;
end 
// Addr[ 16 ]
initial
begin
	Addr[16] = 1'b0;
end 
// Addr[ 15 ]
initial
begin
	Addr[15] = 1'b0;
end 
// Addr[ 14 ]
initial
begin
	Addr[14] = 1'b0;
end 
// Addr[ 13 ]
initial
begin
	Addr[13] = 1'b0;
end 
// Addr[ 12 ]
initial
begin
	Addr[12] = 1'b0;
end 
// Addr[ 11 ]
initial
begin
	Addr[11] = 1'b0;
end 
// Addr[ 10 ]
initial
begin
	Addr[10] = 1'b0;
end 
// Addr[ 9 ]
initial
begin
	Addr[9] = 1'b0;
end 
// Addr[ 8 ]
initial
begin
	Addr[8] = 1'b0;
end 
// Addr[ 7 ]
initial
begin
	Addr[7] = 1'b0;
end 
// Addr[ 6 ]
initial
begin
	Addr[6] = 1'b0;
end 
// Addr[ 5 ]
initial
begin
	Addr[5] = 1'b0;
end 
// Addr[ 4 ]
initial
begin
	Addr[4] = 1'b0;
end 
// Addr[ 3 ]
initial
begin
	Addr[3] = 1'b0;
end 
// Addr[ 2 ]
initial
begin
	Addr[2] = 1'b1;
end 
// Addr[ 1 ]
initial
begin
	Addr[1] = 1'b1;
end 
// Addr[ 0 ]
initial
begin
	Addr[0] = 1'b1;
end 
endmodule

