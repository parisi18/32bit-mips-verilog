// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// VENDOR "Altera"
// PROGRAM "Quartus Prime"
// VERSION "Version 20.1.0 Build 711 06/05/2020 SJ Lite Edition"

// DATE "08/30/2024 19:54:22"

// 
// Device: Altera EP4CE6E22C6 Package TQFP144
// 

// 
// This Verilog file should be used for ModelSim-Altera (Verilog) only
// 

`timescale 1 ps/ 1 ps

module RtAndRdMux (
	Rt,
	Rd,
	RegDst,
	InstrOut);
input 	[4:0] Rt;
input 	[4:0] Rd;
input 	RegDst;
output 	[4:0] InstrOut;

wire gnd;
wire vcc;
wire unknown;

assign gnd = 1'b0;
assign vcc = 1'b1;
assign unknown = 1'bx;

tri1 devclrn;
tri1 devpor;
tri1 devoe;
wire \InstrOut[0]~output_o ;
wire \InstrOut[1]~output_o ;
wire \InstrOut[2]~output_o ;
wire \InstrOut[3]~output_o ;
wire \InstrOut[4]~output_o ;
wire \Rt[0]~input_o ;
wire \Rd[0]~input_o ;
wire \RegDst~input_o ;
wire \InstrOut~0_combout ;
wire \Rt[1]~input_o ;
wire \Rd[1]~input_o ;
wire \InstrOut~1_combout ;
wire \Rt[2]~input_o ;
wire \Rd[2]~input_o ;
wire \InstrOut~2_combout ;
wire \Rt[3]~input_o ;
wire \Rd[3]~input_o ;
wire \InstrOut~3_combout ;
wire \Rt[4]~input_o ;
wire \Rd[4]~input_o ;
wire \InstrOut~4_combout ;


cycloneive_io_obuf \InstrOut[0]~output (
	.i(\InstrOut~0_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\InstrOut[0]~output_o ),
	.obar());
// synopsys translate_off
defparam \InstrOut[0]~output .bus_hold = "false";
defparam \InstrOut[0]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \InstrOut[1]~output (
	.i(\InstrOut~1_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\InstrOut[1]~output_o ),
	.obar());
// synopsys translate_off
defparam \InstrOut[1]~output .bus_hold = "false";
defparam \InstrOut[1]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \InstrOut[2]~output (
	.i(\InstrOut~2_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\InstrOut[2]~output_o ),
	.obar());
// synopsys translate_off
defparam \InstrOut[2]~output .bus_hold = "false";
defparam \InstrOut[2]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \InstrOut[3]~output (
	.i(\InstrOut~3_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\InstrOut[3]~output_o ),
	.obar());
// synopsys translate_off
defparam \InstrOut[3]~output .bus_hold = "false";
defparam \InstrOut[3]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_obuf \InstrOut[4]~output (
	.i(\InstrOut~4_combout ),
	.oe(vcc),
	.seriesterminationcontrol(16'b0000000000000000),
	.devoe(devoe),
	.o(\InstrOut[4]~output_o ),
	.obar());
// synopsys translate_off
defparam \InstrOut[4]~output .bus_hold = "false";
defparam \InstrOut[4]~output .open_drain_output = "false";
// synopsys translate_on

cycloneive_io_ibuf \Rt[0]~input (
	.i(Rt[0]),
	.ibar(gnd),
	.o(\Rt[0]~input_o ));
// synopsys translate_off
defparam \Rt[0]~input .bus_hold = "false";
defparam \Rt[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Rd[0]~input (
	.i(Rd[0]),
	.ibar(gnd),
	.o(\Rd[0]~input_o ));
// synopsys translate_off
defparam \Rd[0]~input .bus_hold = "false";
defparam \Rd[0]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \RegDst~input (
	.i(RegDst),
	.ibar(gnd),
	.o(\RegDst~input_o ));
// synopsys translate_off
defparam \RegDst~input .bus_hold = "false";
defparam \RegDst~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \InstrOut~0 (
// Equation(s):
// \InstrOut~0_combout  = (\RegDst~input_o  & (\Rt[0]~input_o )) # (!\RegDst~input_o  & ((\Rd[0]~input_o )))

	.dataa(\Rt[0]~input_o ),
	.datab(\Rd[0]~input_o ),
	.datac(gnd),
	.datad(\RegDst~input_o ),
	.cin(gnd),
	.combout(\InstrOut~0_combout ),
	.cout());
// synopsys translate_off
defparam \InstrOut~0 .lut_mask = 16'hAACC;
defparam \InstrOut~0 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \Rt[1]~input (
	.i(Rt[1]),
	.ibar(gnd),
	.o(\Rt[1]~input_o ));
// synopsys translate_off
defparam \Rt[1]~input .bus_hold = "false";
defparam \Rt[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Rd[1]~input (
	.i(Rd[1]),
	.ibar(gnd),
	.o(\Rd[1]~input_o ));
// synopsys translate_off
defparam \Rd[1]~input .bus_hold = "false";
defparam \Rd[1]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \InstrOut~1 (
// Equation(s):
// \InstrOut~1_combout  = (\RegDst~input_o  & (\Rt[1]~input_o )) # (!\RegDst~input_o  & ((\Rd[1]~input_o )))

	.dataa(\Rt[1]~input_o ),
	.datab(\Rd[1]~input_o ),
	.datac(gnd),
	.datad(\RegDst~input_o ),
	.cin(gnd),
	.combout(\InstrOut~1_combout ),
	.cout());
// synopsys translate_off
defparam \InstrOut~1 .lut_mask = 16'hAACC;
defparam \InstrOut~1 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \Rt[2]~input (
	.i(Rt[2]),
	.ibar(gnd),
	.o(\Rt[2]~input_o ));
// synopsys translate_off
defparam \Rt[2]~input .bus_hold = "false";
defparam \Rt[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Rd[2]~input (
	.i(Rd[2]),
	.ibar(gnd),
	.o(\Rd[2]~input_o ));
// synopsys translate_off
defparam \Rd[2]~input .bus_hold = "false";
defparam \Rd[2]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \InstrOut~2 (
// Equation(s):
// \InstrOut~2_combout  = (\RegDst~input_o  & (\Rt[2]~input_o )) # (!\RegDst~input_o  & ((\Rd[2]~input_o )))

	.dataa(\Rt[2]~input_o ),
	.datab(\Rd[2]~input_o ),
	.datac(gnd),
	.datad(\RegDst~input_o ),
	.cin(gnd),
	.combout(\InstrOut~2_combout ),
	.cout());
// synopsys translate_off
defparam \InstrOut~2 .lut_mask = 16'hAACC;
defparam \InstrOut~2 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \Rt[3]~input (
	.i(Rt[3]),
	.ibar(gnd),
	.o(\Rt[3]~input_o ));
// synopsys translate_off
defparam \Rt[3]~input .bus_hold = "false";
defparam \Rt[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Rd[3]~input (
	.i(Rd[3]),
	.ibar(gnd),
	.o(\Rd[3]~input_o ));
// synopsys translate_off
defparam \Rd[3]~input .bus_hold = "false";
defparam \Rd[3]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \InstrOut~3 (
// Equation(s):
// \InstrOut~3_combout  = (\RegDst~input_o  & (\Rt[3]~input_o )) # (!\RegDst~input_o  & ((\Rd[3]~input_o )))

	.dataa(\Rt[3]~input_o ),
	.datab(\Rd[3]~input_o ),
	.datac(gnd),
	.datad(\RegDst~input_o ),
	.cin(gnd),
	.combout(\InstrOut~3_combout ),
	.cout());
// synopsys translate_off
defparam \InstrOut~3 .lut_mask = 16'hAACC;
defparam \InstrOut~3 .sum_lutc_input = "datac";
// synopsys translate_on

cycloneive_io_ibuf \Rt[4]~input (
	.i(Rt[4]),
	.ibar(gnd),
	.o(\Rt[4]~input_o ));
// synopsys translate_off
defparam \Rt[4]~input .bus_hold = "false";
defparam \Rt[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_io_ibuf \Rd[4]~input (
	.i(Rd[4]),
	.ibar(gnd),
	.o(\Rd[4]~input_o ));
// synopsys translate_off
defparam \Rd[4]~input .bus_hold = "false";
defparam \Rd[4]~input .simulate_z_as = "z";
// synopsys translate_on

cycloneive_lcell_comb \InstrOut~4 (
// Equation(s):
// \InstrOut~4_combout  = (\RegDst~input_o  & (\Rt[4]~input_o )) # (!\RegDst~input_o  & ((\Rd[4]~input_o )))

	.dataa(\Rt[4]~input_o ),
	.datab(\Rd[4]~input_o ),
	.datac(gnd),
	.datad(\RegDst~input_o ),
	.cin(gnd),
	.combout(\InstrOut~4_combout ),
	.cout());
// synopsys translate_off
defparam \InstrOut~4 .lut_mask = 16'hAACC;
defparam \InstrOut~4 .sum_lutc_input = "datac";
// synopsys translate_on

assign InstrOut[0] = \InstrOut[0]~output_o ;

assign InstrOut[1] = \InstrOut[1]~output_o ;

assign InstrOut[2] = \InstrOut[2]~output_o ;

assign InstrOut[3] = \InstrOut[3]~output_o ;

assign InstrOut[4] = \InstrOut[4]~output_o ;

endmodule
