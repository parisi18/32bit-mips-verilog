// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "08/28/2024 19:30:52"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ProgramCounter
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ProgramCounter_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Jump;
reg [31:0] PcIn;
// wires                                               
wire [31:0] PcOut;

// assign statements (if any)                          
ProgramCounter i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Jump(Jump),
	.PcIn(PcIn),
	.PcOut(PcOut)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
initial
begin
	repeat(12)
	begin
		Clk = 1'b0;
		Clk = #40000 1'b1;
		# 40000;
	end
	Clk = 1'b0;
end 

// Jump
initial
begin
	Jump = 1'b0;
end 

// PcIn[31]
initial
begin
	PcIn[31] = 1'b0;
end 

// PcIn[30]
initial
begin
	PcIn[30] = 1'b0;
end 

// PcIn[29]
initial
begin
	PcIn[29] = 1'b0;
end 

// PcIn[28]
initial
begin
	PcIn[28] = 1'b0;
end 

// PcIn[27]
initial
begin
	PcIn[27] = 1'b0;
end 

// PcIn[26]
initial
begin
	PcIn[26] = 1'b0;
end 

// PcIn[25]
initial
begin
	PcIn[25] = 1'b0;
end 

// PcIn[24]
initial
begin
	PcIn[24] = 1'b0;
end 

// PcIn[23]
initial
begin
	PcIn[23] = 1'b0;
end 

// PcIn[22]
initial
begin
	PcIn[22] = 1'b0;
end 

// PcIn[21]
initial
begin
	PcIn[21] = 1'b0;
end 

// PcIn[20]
initial
begin
	PcIn[20] = 1'b0;
end 

// PcIn[19]
initial
begin
	PcIn[19] = 1'b0;
end 

// PcIn[18]
initial
begin
	PcIn[18] = 1'b0;
end 

// PcIn[17]
initial
begin
	PcIn[17] = 1'b0;
end 

// PcIn[16]
initial
begin
	PcIn[16] = 1'b0;
end 

// PcIn[15]
initial
begin
	PcIn[15] = 1'b0;
end 

// PcIn[14]
initial
begin
	PcIn[14] = 1'b0;
end 

// PcIn[13]
initial
begin
	PcIn[13] = 1'b0;
end 

// PcIn[12]
initial
begin
	PcIn[12] = 1'b0;
end 

// PcIn[11]
initial
begin
	PcIn[11] = 1'b0;
end 

// PcIn[10]
initial
begin
	PcIn[10] = 1'b0;
end 

// PcIn[9]
initial
begin
	PcIn[9] = 1'b0;
end 

// PcIn[8]
initial
begin
	PcIn[8] = 1'b0;
end 

// PcIn[7]
initial
begin
	PcIn[7] = 1'b0;
end 

// PcIn[6]
initial
begin
	PcIn[6] = 1'b0;
end 

// PcIn[5]
initial
begin
	PcIn[5] = 1'b0;
end 

// PcIn[4]
initial
begin
	PcIn[4] = 1'b0;
end 

// PcIn[3]
initial
begin
	PcIn[3] = 1'b0;
end 

// PcIn[2]
initial
begin
	PcIn[2] = 1'b0;
end 

// PcIn[1]
initial
begin
	PcIn[1] = 1'b0;
end 

// PcIn[0]
initial
begin
	PcIn[0] = 1'b1;
end 
endmodule

