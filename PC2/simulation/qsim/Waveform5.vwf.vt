// Copyright (C) 2024  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/01/2024 16:16:30"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Registers
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Registers_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Jal;
reg [31:0] PcOut;
reg [4:0] ReadReg1;
reg [4:0] ReadReg2;
reg RegWrite;
reg [31:0] WriteData;
reg [4:0] WriteReg;
// wires                                               
wire [31:0] DataRead1;
wire [31:0] DataRead2;

// assign statements (if any)                          
Registers i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.DataRead1(DataRead1),
	.DataRead2(DataRead2),
	.Jal(Jal),
	.PcOut(PcOut),
	.ReadReg1(ReadReg1),
	.ReadReg2(ReadReg2),
	.RegWrite(RegWrite),
	.WriteData(WriteData),
	.WriteReg(WriteReg)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
initial
begin
	Clk = 1'b0;
end 

// Jal
initial
begin
	Jal = 1'b0;
end 
// PcOut[ 31 ]
initial
begin
	PcOut[31] = 1'b0;
end 
// PcOut[ 30 ]
initial
begin
	PcOut[30] = 1'b0;
end 
// PcOut[ 29 ]
initial
begin
	PcOut[29] = 1'b0;
end 
// PcOut[ 28 ]
initial
begin
	PcOut[28] = 1'b0;
end 
// PcOut[ 27 ]
initial
begin
	PcOut[27] = 1'b0;
end 
// PcOut[ 26 ]
initial
begin
	PcOut[26] = 1'b0;
end 
// PcOut[ 25 ]
initial
begin
	PcOut[25] = 1'b0;
end 
// PcOut[ 24 ]
initial
begin
	PcOut[24] = 1'b0;
end 
// PcOut[ 23 ]
initial
begin
	PcOut[23] = 1'b0;
end 
// PcOut[ 22 ]
initial
begin
	PcOut[22] = 1'b0;
end 
// PcOut[ 21 ]
initial
begin
	PcOut[21] = 1'b0;
end 
// PcOut[ 20 ]
initial
begin
	PcOut[20] = 1'b0;
end 
// PcOut[ 19 ]
initial
begin
	PcOut[19] = 1'b0;
end 
// PcOut[ 18 ]
initial
begin
	PcOut[18] = 1'b0;
end 
// PcOut[ 17 ]
initial
begin
	PcOut[17] = 1'b0;
end 
// PcOut[ 16 ]
initial
begin
	PcOut[16] = 1'b0;
end 
// PcOut[ 15 ]
initial
begin
	PcOut[15] = 1'b0;
end 
// PcOut[ 14 ]
initial
begin
	PcOut[14] = 1'b0;
end 
// PcOut[ 13 ]
initial
begin
	PcOut[13] = 1'b0;
end 
// PcOut[ 12 ]
initial
begin
	PcOut[12] = 1'b0;
end 
// PcOut[ 11 ]
initial
begin
	PcOut[11] = 1'b0;
end 
// PcOut[ 10 ]
initial
begin
	PcOut[10] = 1'b0;
end 
// PcOut[ 9 ]
initial
begin
	PcOut[9] = 1'b0;
end 
// PcOut[ 8 ]
initial
begin
	PcOut[8] = 1'b0;
end 
// PcOut[ 7 ]
initial
begin
	PcOut[7] = 1'b0;
end 
// PcOut[ 6 ]
initial
begin
	PcOut[6] = 1'b0;
end 
// PcOut[ 5 ]
initial
begin
	PcOut[5] = 1'b0;
end 
// PcOut[ 4 ]
initial
begin
	PcOut[4] = 1'b0;
end 
// PcOut[ 3 ]
initial
begin
	PcOut[3] = 1'b0;
end 
// PcOut[ 2 ]
initial
begin
	PcOut[2] = 1'b0;
end 
// PcOut[ 1 ]
initial
begin
	PcOut[1] = 1'b0;
end 
// PcOut[ 0 ]
initial
begin
	PcOut[0] = 1'b0;
end 
// ReadReg1[ 4 ]
initial
begin
	ReadReg1[4] = 1'b0;
end 
// ReadReg1[ 3 ]
initial
begin
	ReadReg1[3] = 1'b0;
end 
// ReadReg1[ 2 ]
initial
begin
	ReadReg1[2] = 1'b0;
end 
// ReadReg1[ 1 ]
initial
begin
	ReadReg1[1] = 1'b0;
end 
// ReadReg1[ 0 ]
initial
begin
	ReadReg1[0] = 1'b0;
end 
// ReadReg2[ 4 ]
initial
begin
	ReadReg2[4] = 1'b0;
end 
// ReadReg2[ 3 ]
initial
begin
	ReadReg2[3] = 1'b0;
end 
// ReadReg2[ 2 ]
initial
begin
	ReadReg2[2] = 1'b0;
end 
// ReadReg2[ 1 ]
initial
begin
	ReadReg2[1] = 1'b0;
end 
// ReadReg2[ 0 ]
initial
begin
	ReadReg2[0] = 1'b0;
end 
// WriteData[ 31 ]
initial
begin
	WriteData[31] = 1'b0;
end 
// WriteData[ 30 ]
initial
begin
	WriteData[30] = 1'b0;
end 
// WriteData[ 29 ]
initial
begin
	WriteData[29] = 1'b0;
end 
// WriteData[ 28 ]
initial
begin
	WriteData[28] = 1'b0;
end 
// WriteData[ 27 ]
initial
begin
	WriteData[27] = 1'b0;
end 
// WriteData[ 26 ]
initial
begin
	WriteData[26] = 1'b0;
end 
// WriteData[ 25 ]
initial
begin
	WriteData[25] = 1'b0;
end 
// WriteData[ 24 ]
initial
begin
	WriteData[24] = 1'b0;
end 
// WriteData[ 23 ]
initial
begin
	WriteData[23] = 1'b0;
end 
// WriteData[ 22 ]
initial
begin
	WriteData[22] = 1'b0;
end 
// WriteData[ 21 ]
initial
begin
	WriteData[21] = 1'b0;
end 
// WriteData[ 20 ]
initial
begin
	WriteData[20] = 1'b0;
end 
// WriteData[ 19 ]
initial
begin
	WriteData[19] = 1'b0;
end 
// WriteData[ 18 ]
initial
begin
	WriteData[18] = 1'b0;
end 
// WriteData[ 17 ]
initial
begin
	WriteData[17] = 1'b0;
end 
// WriteData[ 16 ]
initial
begin
	WriteData[16] = 1'b0;
end 
// WriteData[ 15 ]
initial
begin
	WriteData[15] = 1'b0;
end 
// WriteData[ 14 ]
initial
begin
	WriteData[14] = 1'b0;
end 
// WriteData[ 13 ]
initial
begin
	WriteData[13] = 1'b0;
end 
// WriteData[ 12 ]
initial
begin
	WriteData[12] = 1'b0;
end 
// WriteData[ 11 ]
initial
begin
	WriteData[11] = 1'b0;
end 
// WriteData[ 10 ]
initial
begin
	WriteData[10] = 1'b0;
end 
// WriteData[ 9 ]
initial
begin
	WriteData[9] = 1'b0;
end 
// WriteData[ 8 ]
initial
begin
	WriteData[8] = 1'b0;
end 
// WriteData[ 7 ]
initial
begin
	WriteData[7] = 1'b0;
end 
// WriteData[ 6 ]
initial
begin
	WriteData[6] = 1'b0;
end 
// WriteData[ 5 ]
initial
begin
	WriteData[5] = 1'b0;
end 
// WriteData[ 4 ]
initial
begin
	WriteData[4] = 1'b0;
end 
// WriteData[ 3 ]
initial
begin
	WriteData[3] = 1'b0;
end 
// WriteData[ 2 ]
initial
begin
	WriteData[2] = 1'b0;
end 
// WriteData[ 1 ]
initial
begin
	WriteData[1] = 1'b0;
end 
// WriteData[ 0 ]
initial
begin
	WriteData[0] = 1'b0;
end 
// WriteReg[ 4 ]
initial
begin
	WriteReg[4] = 1'b0;
end 
// WriteReg[ 3 ]
initial
begin
	WriteReg[3] = 1'b0;
end 
// WriteReg[ 2 ]
initial
begin
	WriteReg[2] = 1'b0;
end 
// WriteReg[ 1 ]
initial
begin
	WriteReg[1] = 1'b0;
end 
// WriteReg[ 0 ]
initial
begin
	WriteReg[0] = 1'b0;
end 
endmodule

